pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        PEM_FILE = 'C:/Ansible-keys/terraformkeypair.pem'
        S3_BUCKET = 'my-terraform-state-bucket-425'
        SCRIPT_FOLDER = 'C:/Windows/Temp'
    }
    stages {
        stage('Fetch Windows VM IPs from Terraform State') {
            steps {
                script {
                    echo "Fetching Windows VM IPs from Terraform State..."
                    def jsonOutput = sh(script: '''
                        aws s3 cp s3://my-terraform-state-bucket-425/terraform.tfstate terraform.tfstate --quiet
                        cat terraform.tfstate | jq -r ".resources[] | select(.type==\\"aws_instance\\") | .instances[] | select(.attributes.platform==\\"windows\\") | .attributes.public_ip"
                    ''', returnStdout: true).trim()
                    
                    if (jsonOutput) {
                        env.WINDOWS_IPS = jsonOutput.split("\n").join(" ")
                        echo "Windows VM IPs: ${env.WINDOWS_IPS}"
                    } else {
                        error "No Windows VM IPs found in Terraform state!"
                    }
                }
            }
        }

        stage('Decrypt Windows Password') {
            steps {
                script {
                    echo "Decrypting Windows Administrator Password..."
                    def decryptedPass = sh(script: """
                        aws ec2 get-password-data --instance-id \$(cat terraform.tfstate | jq -r '.resources[] | select(.type=="aws_instance") | .instances[] | select(.attributes.platform=="windows") | .attributes.id') --priv-key $PEM_FILE --query 'PasswordData' --output text
                    """, returnStdout: true).trim()
                    
                    if (decryptedPass) {
                        env.WINDOWS_PASSWORD = decryptedPass
                        echo "Decrypted Windows Password: [REDACTED]"
                    } else {
                        error "Failed to decrypt Windows password!"
                    }
                }
            }
        }

        stage('Download Scripts from S3') {
            steps {
                script {
                    def ips = env.WINDOWS_IPS.split(" ")
                    def username = "Administrator"

                    for (ip in ips) {
                        try {
                            echo "Downloading scripts on Windows VM: ${ip}"

                            powershell """
                                \$User = '${username}'
                                \$Password = '${env.WINDOWS_PASSWORD}'
                                \$SecurePassword = ConvertTo-SecureString \$Password -AsPlainText -Force
                                \$Credential = New-Object System.Management.Automation.PSCredential (\$User, \$SecurePassword)

                                Invoke-Command -ComputerName ${ip} -Credential \$Credential -ScriptBlock {
                                    mkdir C:\\Windows\\Temp -ErrorAction SilentlyContinue
                                    aws s3 cp s3://${env.S3_BUCKET}/ConfigureRemotingForAnsible.ps1 C:\\Windows\\Temp\\ConfigureRemotingForAnsible.ps1
                                    aws s3 cp s3://${env.S3_BUCKET}/Create_user.ps1 C:\\Windows\\Temp\\Create_user.ps1
                                }
                            """
                        } catch (Exception e) {
                            error "Failed to download scripts on ${ip}. Error: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Execute Scripts on Windows VMs') {
            steps {
                script {
                    def ips = env.WINDOWS_IPS.split(" ")
                    def username = "Administrator"

                    for (ip in ips) {
                        try {
                            echo "Executing scripts on Windows VM: ${ip}"

                            powershell """
                                \$User = '${username}'
                                \$Password = '${env.WINDOWS_PASSWORD}'
                                \$SecurePassword = ConvertTo-SecureString \$Password -AsPlainText -Force
                                \$Credential = New-Object System.Management.Automation.PSCredential (\$User, \$SecurePassword)

                                Invoke-Command -ComputerName ${ip} -Credential \$Credential -ScriptBlock {
                                    cd C:\\Windows\\Temp\\
                                    powershell -ExecutionPolicy Bypass -File .\\ConfigureRemotingForAnsible.ps1
                                    powershell -ExecutionPolicy Bypass -File .\\Create_user.ps1
                                }
                            """
                        } catch (Exception e) {
                            error "Failed to execute scripts on ${ip}. Error: ${e.message}"
                        }
                    }
                }
            }
        }
    }
}
