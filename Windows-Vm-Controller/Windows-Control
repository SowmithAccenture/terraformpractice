pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        TF_STATE_BUCKET = "my-terraform-state-bucket-425"
        TF_STATE_KEY = "terraform.tfstate"
        S3_SCRIPT_PATH = "s3://my-terraform-state-bucket-425"
        ADMIN_USERNAME = "Administrator"
        GIT_BASH = "C:\\Program Files\\Git\\bin\\bash.exe"
    }

    stages {
          stage('Get Windows Instance IPs from Terraform State') {
            steps {
                script {
                    // Fetch latest Terraform state file from S3
                    bat "\"${GIT_BASH}\" -c 'AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY} aws s3 cp s3://${TF_STATE_BUCKET}/${TF_STATE_KEY} terraform.tfstate'"

                    // Extract only Windows VM public IPs from Terraform state
                    def windowsIPs = powershell(returnStdout: true, script: """
                        \$tfState = Get-Content terraform.tfstate -Raw | ConvertFrom-Json
                        \$windowsIPs = \$tfState.resources | Where-Object { \$_.'type' -eq 'aws_instance' -and \$_.'name' -match 'windows' } | 
                            ForEach-Object { \$_.'instances' } | ForEach-Object { \$_[0].'attributes'.'public_ip' }
                        \$windowsIPs -join ','
                    """).trim()

                    if (!windowsIPs) {
                        error("ERROR: No Windows VM IPs found in Terraform state!")
                    }

                    echo "Windows VM IPs: ${windowsIPs}"

                    // Store IPs as an environment variable
                    env.WINDOWS_IPS = windowsIPs
                }
            }
        }

        stage('Download Scripts from S3') {
            steps {
                script {
                    echo "Downloading scripts from S3..."

                    bat "\"C:\\Program Files\\Git\\bin\\bash.exe\" -c 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} aws s3 cp ${S3_SCRIPT_PATH}/ConfigureRemotingForAnsible.ps1 ./'"
                    bat "\"C:\\Program Files\\Git\\bin\\bash.exe\" -c 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} aws s3 cp ${S3_SCRIPT_PATH}/Create_user.ps1 ./'"
                    
                    echo "Scripts downloaded successfully!"
                }
            }
        }

        stage('Decrypt Windows Passwords') {
            steps {
                withCredentials([file(credentialsId: 'windows-private-key', variable: 'PRIVATE_KEY_PATH')]) {
                    script {
                        def ipList = env.WINDOWS_IPS?.split(',')?.findAll { it?.trim() } ?: []
                        def passwordEntries = []

                        for (ip in ipList) {
                            echo "Decrypting password for ${ip}..."

                            // Fetch instance ID based on IP
                            def instanceId = powershell(returnStdout: true, script: """
                                aws ec2 describe-instances --filters "Name=ip-address,Values=${ip}" --query "Reservations[*].Instances[*].InstanceId" --output text --region us-east-1
                            """).trim()

                            if (!instanceId) {
                                echo "WARNING: Instance ID for ${ip} not found. Skipping..."
                                continue
                            }

                            // Run AWS command to get decrypted password
                            def decryptedPassword = powershell(returnStdout: true, script: """
                                aws ec2 get-password-data --instance-id ${instanceId} --priv-launch-key ${PRIVATE_KEY_PATH} --query 'PasswordData' --output text --region us-east-1
                            """).trim()

                            if (!decryptedPassword || decryptedPassword == "None") {
                                echo "WARNING: Failed to retrieve decrypted password for ${ip}. Skipping..."
                                continue
                            }

                            passwordEntries.add("${ip}:${decryptedPassword}")
                        }

                        if (passwordEntries.isEmpty()) {
                            error "No passwords were successfully decrypted. Exiting..."
                        }

                        // Store decrypted passwords in a temporary file
                        def passwordFile = "${WORKSPACE}\\decrypted_passwords.txt"
                        writeFile file: passwordFile, text: passwordEntries.join('\n')

                        echo "Decryption complete! Passwords stored in ${passwordFile}"
                    }
                }
            }
        }

     }

            post {
                failure {
                    echo "Pipeline failed! Check logs for details."
                }
            }
        }