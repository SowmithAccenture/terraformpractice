pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm  // Checkout your git repository
            }
        }

        stage('Plan') {
            steps {
                script {
                    def gitBash = 'C:\\Program Files\\Git\\bin\\bash.exe'
                    def terraformPath = '/c/terraform/terraform_1.9.8_windows_amd64/terraform.exe'
                    bat "\"${gitBash}\" -c '${terraformPath} init' -backend-config=backend.tf -input=false"
                    bat "\"${gitBash}\" -c '${terraformPath} plan -out tfplan' -backend-config=backend.tf -input=false"
                    bat "\"${gitBash}\" -c '${terraformPath} show -no-color tfplan > tfplan.txt'"
                }
            }
        }

        stage('Approval') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }
            steps {
                script {
                    def plan = readFile 'terraform/tfplan.txt'
                    input message: "Do you want to apply the plan?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }

        stage('Apply') {
    steps {
        script {
            def gitBash = 'C:\\Program Files\\Git\\bin\\bash.exe'
            def terraformPath = '/c/terraform/terraform_1.9.8_windows_amd64/terraform.exe'
            
            // Initialize Terraform with backend configuration
            bat "\"${gitBash}\" -c '${terraformPath} init -backend-config=backend.tf -input=false'"

            // Apply the Terraform plan (auto-apply without confirmation)
            bat "\"${gitBash}\" -c '${terraformPath} apply -input=false tfplan'"

            // Optionally store the Terraform state after apply
            archiveArtifacts artifacts: '**/terraform.tfstate', allowEmptyArchive: true
                }
            }
        }

        stage('Store State') {
            steps {
                script {
                    archiveArtifacts artifacts: '**/terraform.tfstate', allowEmptyArchive: true
                }
            }
        }
    }
}
